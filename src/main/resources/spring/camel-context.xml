<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<camel:camelContext id="mainContext" xmlns="http://camel.apache.org/schema/spring">

		<onException>
			<exception>java.lang.Exception</exception>
			<handled>
				<constant>true</constant>
			</handled>
			<process ref="errorProccessor" />
		</onException>


		<restConfiguration apiContextPath="api-docs" bindingMode="auto" component="undertow"
			contextPath="/mylibrary" enableCORS="true" port="8080">
			<consumerProperty key="bridgeErrorHandler" value="true" />
			<dataFormatProperty key="prettyPrint" value="true" />
			<apiProperty key="cors" value="true" />
			<apiProperty key="api.title" value="my library Service" />
			<apiProperty key="api.version" value="1.0.0" />
		</restConfiguration>

		<rest>
			<get id="getBooks" uri="/books">
				<description>Gets a list of all `Book` entities.</description>
				<responseMessage message="All the books" />
				<to uri="direct:getBooks" />
			</get>

			<post id="createBook" uri="/books" type="com.chiochuan.demo.fuse.domain.Book">
				<description>Creates a new instance of a `Book`.</description>
				<param description="A new `Book` to be created." name="body" required="true" type="body" />
				<to uri="direct:createBook" />
			</post>

			<get id="getBook" uri="/books/{bookId}">
				<description>Gets the details of a single instance of a `Book`.</description>
				<param dataType="string" description="A unique identifier for a `Book`." name="bookId" required="true"
					type="path" />
				<to uri="direct:getBooks" />
			</get>

			<put id="updateBook" uri="/books/{bookId}" type="com.chiochuan.demo.fuse.domain.Book">
				<description>Updates an existing `Book`.</description>
				<param dataType="string" description="A unique identifier for a `Book`." name="bookId" required="true"
					type="path" />
				<param description="Updated `Book` information." name="body" required="true" type="body" />
				<to uri="direct:updateBook" />
			</put>

			<delete id="deleteBook" uri="/books/{bookId}">
				<description>Deletes an existing `Book`.</description>
				<param dataType="string" description="A unique identifier for a `Book`." name="bookId" required="true"
					type="path" />
				<to uri="direct:deleteBook" />
			</delete>
		</rest>

		<route id="mylibrary-getbook-route">
			<from id="mylibrary-getbook" uri="direct:getBooks" />
			<log message=">>> ${headers} " />
			<to
				uri="sql:select * from book where :#${header.bookId} IS NULL OR id = :#${header.bookId}?dataSourceRef=dataSource" />
		</route>

		<route id="mylibrary-createbook-route">
			<from id="mylibrary-createbook" uri="direct:createBook" />
			<log message=">>> ${headers} :: ${body} " />
			<to uri="sql:insert into book values (:#${body.id}, :#${body.author}, :#${body.title})?dataSourceRef=dataSource" />

		</route>

		<route id="mylibrary-updatebook-route">
			<from id="mylibrary-updatebook" uri="direct:updateBook" />
			<log message=">>> ${headers} :: ${body} " />
			<to
				uri="sql:update book set title = :#${body.title}, author = :#${body.author} where id = :#${body.id}?dataSourceRef=dataSource" />

		</route>

		<route id="mylibrary-deletebook-route">
			<from id="mylibrary-deletebook" uri="direct:deleteBook" />
			<log message=">>> ${headers}" />
			<to uri="sql:delete from book where id = :#${header.bookId}?dataSourceRef=dataSource" />

		</route>

	</camel:camelContext>
</beans>
